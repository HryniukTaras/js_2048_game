{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.previousState = this.state.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.gameOver = false;\n    }\n    // Returns empty cells\n    static getEmptyCells(state) {\n        return state.flat().filter((cell)=>cell === 0);\n    }\n    moveLeft() {\n        this.#move(false, false);\n    }\n    moveRight() {\n        this.#move(false, true);\n    }\n    moveUp() {\n        this.#move(true, false);\n    }\n    moveDown() {\n        this.#move(true, true);\n    }\n    // Universal function to move tiles\n    #move(isVertical = false, reverse = false) {\n        if (this.getStatus() !== \"playing\" || this.getStatus() === \"win\") return;\n        this.previousState = this.state.map((row)=>[\n                ...row\n            ]);\n        let changed = false;\n        for(let i = 0; i < 4; i++){\n            const stack = this.#collectStack(i, isVertical, reverse);\n            const newStack = this.#combineStack(stack);\n            if (this.#updateState(i, newStack, isVertical, reverse)) changed = true;\n        }\n        if (changed) {\n            this.#generateRandomTile();\n            if (!this.hasPossibleMoves()) this.gameOver = true;\n        }\n    }\n    #collectStack(index, isVertical, reverse) {\n        const stack = [];\n        for(let j = 0; j < 4; j++){\n            const cellValue = isVertical ? this.state[reverse ? 3 - j : j][index] : this.state[index][reverse ? 3 - j : j];\n            if (cellValue !== 0) stack.push(cellValue);\n        }\n        return stack;\n    }\n    #combineStack(stack) {\n        const newStack = [];\n        while(stack.length > 0){\n            const firstNumber = stack.shift();\n            if (stack.length > 0 && firstNumber === stack[0]) {\n                const combinedNumbers = firstNumber + stack.shift();\n                newStack.push(combinedNumbers);\n                this.#updateScore(combinedNumbers);\n            } else newStack.push(firstNumber);\n        }\n        while(newStack.length < 4)newStack.push(0);\n        return newStack;\n    }\n    #updateState(index, newStack, isVertical, reverse) {\n        let changed = false;\n        for(let j = 0; j < 4; j++){\n            const currentValue = isVertical ? this.state[reverse ? 3 - j : j][index] : this.state[index][reverse ? 3 - j : j];\n            if (currentValue !== newStack[j]) {\n                changed = true;\n                if (isVertical) this.state[reverse ? 3 - j : j][index] = newStack[j];\n                else this.state[index][reverse ? 3 - j : j] = newStack[j];\n            }\n        }\n        return changed;\n    }\n    getScore() {\n        return this.score;\n    }\n    #updateScore(newScore = 0) {\n        this.score += newScore;\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getPreviousState() {\n        return this.previousState;\n    }\n    getStatus() {\n        const isInitial = JSON.stringify(this.state) === JSON.stringify(this.initialState);\n        if (isInitial) return \"idle\";\n        if (this.state.flat().includes(2048)) return \"win\";\n        if (this.gameOver) return \"lose\";\n        return \"playing\";\n    }\n    // Starts the game\n    start() {\n        this.previousState = this.state.map((row)=>[\n                ...row\n            ]);\n        // Generates first two numbers at game start\n        this.#generateRandomTile();\n        this.#generateRandomTile();\n    }\n    // Resets the game\n    restart() {\n        this.previousState = this.state.map((row)=>[\n                ...row\n            ]);\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.gameOver = false;\n    }\n    // Returns false if there are no more available moves\n    hasPossibleMoves() {\n        // Check if there's at least one empty cell\n        if (this.state.flat().includes(0)) return true;\n        // Check if tiles can be merged\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const current = this.state[row][col];\n            // Check horizontal merge\n            if (col < 3 && current === this.state[row][col + 1]) return true;\n            // Check vertical merge\n            if (row < 3 && current === this.state[row + 1][col]) return true;\n        }\n        return false;\n    }\n    // Generates random number for cell\n    #generateRandomTile() {\n        let row, col;\n        do {\n            // Random row and column\n            row = Math.floor(Math.random() * 4);\n            col = Math.floor(Math.random() * 4);\n        }while (this.state[row][col] !== 0); // Checking that the cell is empty\n        /**\n     * Math.floor(Math.random() * 100) generates number from 0 to 100\n     * if random number < 10, 4 is returned, otherwise 2 is returned\n     * resulting in a 90% chance for 2 and a 10% chance for 4\n     */ this.state[row][col] = Math.floor(Math.random() * 100) < 10 ? 4 : 2;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nlet $09e991522ca7e64e$var$isFirstRender = true;\n// Returns changed rows and columns\nconst $09e991522ca7e64e$var$getNewNumbers = ()=>{\n    const currentState = $09e991522ca7e64e$var$game.getState();\n    const previousState = $09e991522ca7e64e$var$game.getPreviousState();\n    /**\n   * compares the previous and current state,\n   * returns an array of changed cells, otherwise an empty array\n   *\n   * For example:\n   *   [\n   *     { rowIndex: 0, cellIndex: 1, newValue: 2 },\n   *     { rowIndex: 1, cellIndex: 3, newValue: 64 },\n   *     { rowIndex: 1, cellIndex: 2, newValue: 128 },\n   *   ]\n   */ const result = currentState.reduce((changedIndices, row, rowIndex)=>{\n        row.forEach((cell, cellIndex)=>{\n            if ($09e991522ca7e64e$var$isFirstRender || cell !== previousState[rowIndex][cellIndex]) changedIndices.push({\n                rowIndex: rowIndex,\n                cellIndex: cellIndex,\n                newValue: cell\n            });\n        });\n        return changedIndices;\n    }, []);\n    if ($09e991522ca7e64e$var$isFirstRender) $09e991522ca7e64e$var$isFirstRender = false;\n    return result;\n};\n// Sets new numbers on page\nconst $09e991522ca7e64e$var$setChangedCells = ()=>{\n    const allRows = document.querySelectorAll(\".field-row\");\n    const changedCells = $09e991522ca7e64e$var$getNewNumbers();\n    // Checks if all cells are equal to 0\n    const gameIsRestarted = (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).getEmptyCells($09e991522ca7e64e$var$game.getState()).length === 16;\n    changedCells.forEach(({ rowIndex: rowIndex, cellIndex: cellIndex, newValue: newValue })=>{\n        const columnsInRow = allRows[rowIndex].querySelectorAll(\".field-cell\");\n        const cell = columnsInRow[cellIndex];\n        cell.className = \"field-cell\";\n        cell.textContent = gameIsRestarted || newValue === 0 ? \"\" : newValue;\n        if (!gameIsRestarted && newValue !== 0) cell.classList.add(`field-cell--${newValue}`);\n    });\n    // Updates the score on page after each move\n    const gameScore = $09e991522ca7e64e$var$game.getScore();\n    document.querySelector(\".game-score\").textContent = gameScore;\n};\n// Displays message <p> and sets styles\nconst $09e991522ca7e64e$var$updateGameStatus = (currentStatus)=>{\n    const messages = {\n        lose: document.querySelector(\".message-lose\"),\n        win: document.querySelector(\".message-win\"),\n        idle: document.querySelector(\".message-start\")\n    };\n    // Hide all messages first\n    Object.values(messages).forEach((message)=>{\n        message.classList.add(\"hidden\");\n    });\n    // Show the appropriate message\n    if (messages[currentStatus]) messages[currentStatus].classList.remove(\"hidden\");\n    // Update start button\n    if (currentStatus === \"idle\") {\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n    }\n    if (currentStatus === \"playing\") {\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    }\n    if (currentStatus === \"lose\") document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n    if (currentStatus === \"win\") document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n};\nconst $09e991522ca7e64e$var$handleKeyDown = (e)=>{\n    const key = e.key;\n    const moves = {\n        ArrowUp: ()=>$09e991522ca7e64e$var$game.moveUp(),\n        ArrowDown: ()=>$09e991522ca7e64e$var$game.moveDown(),\n        ArrowLeft: ()=>$09e991522ca7e64e$var$game.moveLeft(),\n        ArrowRight: ()=>$09e991522ca7e64e$var$game.moveRight()\n    };\n    if (moves[key]) {\n        moves[key](); // Calls the appropriate method\n        $09e991522ca7e64e$var$setChangedCells(); //  Updates cells after each movement\n        $09e991522ca7e64e$var$updateGameStatus($09e991522ca7e64e$var$game.getStatus()); // Updates status\n    }\n};\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nlet $09e991522ca7e64e$var$gameStarted = false;\n// Start game\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$gameStarted = !$09e991522ca7e64e$var$gameStarted;\n    // If game stopped\n    if (!$09e991522ca7e64e$var$gameStarted) {\n        $09e991522ca7e64e$var$game.restart();\n        // Sets new numbers on page\n        $09e991522ca7e64e$var$setChangedCells();\n        // Checks game status and update message\n        $09e991522ca7e64e$var$updateGameStatus($09e991522ca7e64e$var$game.getStatus());\n        // Turnes off listening for keyboard events\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n        return;\n    }\n    // Generates 2 cells at the beginning\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$setChangedCells();\n    $09e991522ca7e64e$var$updateGameStatus($09e991522ca7e64e$var$game.getStatus());\n    // Turnes on listening for keyboard events\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n});\n\n\n//# sourceMappingURL=index.47120921.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class';\n\nconst game = new Game();\n\nlet isFirstRender = true;\n\n// Returns changed rows and columns\nconst getNewNumbers = () => {\n  const currentState = game.getState();\n  const previousState = game.getPreviousState();\n  /**\n   * compares the previous and current state,\n   * returns an array of changed cells, otherwise an empty array\n   *\n   * For example:\n   *   [\n   *     { rowIndex: 0, cellIndex: 1, newValue: 2 },\n   *     { rowIndex: 1, cellIndex: 3, newValue: 64 },\n   *     { rowIndex: 1, cellIndex: 2, newValue: 128 },\n   *   ]\n   */\n  const result = currentState.reduce((changedIndices, row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      if (isFirstRender || cell !== previousState[rowIndex][cellIndex]) {\n        changedIndices.push({\n          rowIndex: rowIndex,\n          cellIndex: cellIndex,\n          newValue: cell,\n        });\n      }\n    });\n\n    return changedIndices;\n  }, []);\n\n  if (isFirstRender) {\n    isFirstRender = false;\n  }\n\n  return result;\n};\n\n// Sets new numbers on page\nconst setChangedCells = () => {\n  const allRows = document.querySelectorAll('.field-row');\n  const changedCells = getNewNumbers();\n\n  // Checks if all cells are equal to 0\n  const gameIsRestarted = Game.getEmptyCells(game.getState()).length === 16;\n\n  changedCells.forEach(({ rowIndex, cellIndex, newValue }) => {\n    const columnsInRow = allRows[rowIndex].querySelectorAll('.field-cell');\n    const cell = columnsInRow[cellIndex];\n\n    cell.className = 'field-cell';\n    cell.textContent = gameIsRestarted || newValue === 0 ? '' : newValue;\n\n    if (!gameIsRestarted && newValue !== 0) {\n      cell.classList.add(`field-cell--${newValue}`);\n    }\n  });\n\n  // Updates the score on page after each move\n  const gameScore = game.getScore();\n\n  document.querySelector('.game-score').textContent = gameScore;\n};\n\n// Displays message <p> and sets styles\nconst updateGameStatus = (currentStatus) => {\n  const messages = {\n    lose: document.querySelector('.message-lose'),\n    win: document.querySelector('.message-win'),\n    idle: document.querySelector('.message-start'),\n  };\n\n  // Hide all messages first\n  Object.values(messages).forEach((message) => {\n    message.classList.add('hidden');\n  });\n\n  // Show the appropriate message\n  if (messages[currentStatus]) {\n    messages[currentStatus].classList.remove('hidden');\n  }\n\n  // Update start button\n  if (currentStatus === 'idle') {\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n  }\n\n  if (currentStatus === 'playing') {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  }\n\n  if (currentStatus === 'lose') {\n    document.removeEventListener('keydown', handleKeyDown);\n  }\n\n  if (currentStatus === 'win') {\n    document.removeEventListener('keydown', handleKeyDown);\n  }\n};\n\nconst handleKeyDown = (e) => {\n  const key = e.key;\n\n  const moves = {\n    ArrowUp: () => game.moveUp(),\n    ArrowDown: () => game.moveDown(),\n    ArrowLeft: () => game.moveLeft(),\n    ArrowRight: () => game.moveRight(),\n  };\n\n  if (moves[key]) {\n    moves[key](); // Calls the appropriate method\n    setChangedCells(); //  Updates cells after each movement\n    updateGameStatus(game.getStatus()); // Updates status\n  }\n};\n\nconst startButton = document.querySelector('.start');\n\nlet gameStarted = false;\n\n// Start game\nstartButton.addEventListener('click', () => {\n  gameStarted = !gameStarted;\n\n  // If game stopped\n  if (!gameStarted) {\n    game.restart();\n\n    // Sets new numbers on page\n    setChangedCells();\n\n    // Checks game status and update message\n    updateGameStatus(game.getStatus());\n\n    // Turnes off listening for keyboard events\n    document.removeEventListener('keydown', handleKeyDown);\n\n    return;\n  }\n\n  // Generates 2 cells at the beginning\n  game.start();\n  setChangedCells();\n  updateGameStatus(game.getStatus());\n\n  // Turnes on listening for keyboard events\n  document.addEventListener('keydown', handleKeyDown);\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.previousState = this.state.map((row) => [...row]);\n\n    this.score = 0;\n    this.gameOver = false;\n  }\n\n  // Returns empty cells\n  static getEmptyCells(state) {\n    return state.flat().filter((cell) => cell === 0);\n  }\n\n  moveLeft() {\n    this.#move(false, false);\n  }\n\n  moveRight() {\n    this.#move(false, true);\n  }\n\n  moveUp() {\n    this.#move(true, false);\n  }\n\n  moveDown() {\n    this.#move(true, true);\n  }\n\n  // Universal function to move tiles\n  #move(isVertical = false, reverse = false) {\n    if (this.getStatus() !== 'playing' || this.getStatus() === 'win') {\n      return;\n    }\n\n    this.previousState = this.state.map((row) => [...row]);\n\n    let changed = false;\n\n    for (let i = 0; i < 4; i++) {\n      const stack = this.#collectStack(i, isVertical, reverse);\n      const newStack = this.#combineStack(stack);\n\n      if (this.#updateState(i, newStack, isVertical, reverse)) {\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.#generateRandomTile();\n\n      if (!this.hasPossibleMoves()) {\n        this.gameOver = true;\n      }\n    }\n  }\n\n  #collectStack(index, isVertical, reverse) {\n    const stack = [];\n\n    for (let j = 0; j < 4; j++) {\n      const cellValue = isVertical\n        ? this.state[reverse ? 3 - j : j][index]\n        : this.state[index][reverse ? 3 - j : j];\n\n      if (cellValue !== 0) {\n        stack.push(cellValue);\n      }\n    }\n\n    return stack;\n  }\n\n  #combineStack(stack) {\n    const newStack = [];\n\n    while (stack.length > 0) {\n      const firstNumber = stack.shift();\n\n      if (stack.length > 0 && firstNumber === stack[0]) {\n        const combinedNumbers = firstNumber + stack.shift();\n\n        newStack.push(combinedNumbers);\n        this.#updateScore(combinedNumbers);\n      } else {\n        newStack.push(firstNumber);\n      }\n    }\n\n    while (newStack.length < 4) {\n      newStack.push(0);\n    }\n\n    return newStack;\n  }\n\n  #updateState(index, newStack, isVertical, reverse) {\n    let changed = false;\n\n    for (let j = 0; j < 4; j++) {\n      const currentValue = isVertical\n        ? this.state[reverse ? 3 - j : j][index]\n        : this.state[index][reverse ? 3 - j : j];\n\n      if (currentValue !== newStack[j]) {\n        changed = true;\n\n        if (isVertical) {\n          this.state[reverse ? 3 - j : j][index] = newStack[j];\n        } else {\n          this.state[index][reverse ? 3 - j : j] = newStack[j];\n        }\n      }\n    }\n\n    return changed;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  #updateScore(newScore = 0) {\n    this.score += newScore;\n\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getPreviousState() {\n    return this.previousState;\n  }\n\n  getStatus() {\n    const isInitial =\n      JSON.stringify(this.state) === JSON.stringify(this.initialState);\n\n    if (isInitial) {\n      return 'idle';\n    }\n\n    if (this.state.flat().includes(2048)) {\n      return 'win';\n    }\n\n    if (this.gameOver) {\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  // Starts the game\n  start() {\n    this.previousState = this.state.map((row) => [...row]);\n\n    // Generates first two numbers at game start\n    this.#generateRandomTile();\n    this.#generateRandomTile();\n  }\n\n  // Resets the game\n  restart() {\n    this.previousState = this.state.map((row) => [...row]);\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.gameOver = false;\n  }\n\n  // Returns false if there are no more available moves\n  hasPossibleMoves() {\n    // Check if there's at least one empty cell\n    if (this.state.flat().includes(0)) {\n      return true;\n    }\n\n    // Check if tiles can be merged\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.state[row][col];\n\n        // Check horizontal merge\n        if (col < 3 && current === this.state[row][col + 1]) {\n          return true;\n        }\n\n        // Check vertical merge\n        if (row < 3 && current === this.state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  // Generates random number for cell\n  #generateRandomTile() {\n    let row, col;\n\n    do {\n      // Random row and column\n      row = Math.floor(Math.random() * 4);\n      col = Math.floor(Math.random() * 4);\n    } while (this.state[row][col] !== 0); // Checking that the cell is empty\n\n    /**\n     * Math.floor(Math.random() * 100) generates number from 0 to 100\n     * if random number < 10, 4 is returned, otherwise 2 is returned\n     * resulting in a 90% chance for 2 and a 10% chance for 4\n     */\n    this.state[row][col] = Math.floor(Math.random() * 100) < 10 ? 4 : 2;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$parcel$interopDefault","a","__esModule","default","$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","state","map","row","previousState","score","gameOver","getEmptyCells","flat","filter","cell","moveLeft","moveRight","moveUp","moveDown","isVertical","reverse","getStatus","changed","i","stack","newStack","hasPossibleMoves","index","j","cellValue","push","length","firstNumber","shift","combinedNumbers","getScore","newScore","getState","getPreviousState","JSON","stringify","includes","start","restart","col","current","Math","floor","random","$09e991522ca7e64e$var$isFirstRender","$09e991522ca7e64e$var$getNewNumbers","currentState","result","reduce","changedIndices","rowIndex","forEach","cellIndex","newValue","$09e991522ca7e64e$var$setChangedCells","allRows","document","querySelectorAll","changedCells","gameIsRestarted","columnsInRow","className","textContent","classList","add","gameScore","querySelector","$09e991522ca7e64e$var$updateGameStatus","currentStatus","messages","lose","win","idle","Object","values","message","remove","$09e991522ca7e64e$var$startButton","removeEventListener","$09e991522ca7e64e$var$handleKeyDown","e","key","moves","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","$09e991522ca7e64e$var$gameStarted","addEventListener"],"version":3,"file":"index.47120921.js.map"}