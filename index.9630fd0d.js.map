{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_class_private_method_get.js","node_modules/@swc/helpers/esm/_class_private_method_init.js","node_modules/@swc/helpers/esm/_check_private_redeclaration.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $ac6739cbe5bf1c84$export$71511d61b312f219(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) throw new TypeError(\"attempted to get private field on non-instance\");\n    return fn;\n}\n\n\nfunction $f86983e96b0c893e$export$71511d61b312f219(obj, privateCollection) {\n    if (privateCollection.has(obj)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\n\n\nfunction $ea91727f98d0802f$export$71511d61b312f219(obj, privateSet) {\n    (0, $f86983e96b0c893e$export$71511d61b312f219)(obj, privateSet);\n    privateSet.add(obj);\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar // Universal function to move tiles\n$3d28d7f1aac198f5$var$_move = /*#__PURE__*/ new WeakSet(), $3d28d7f1aac198f5$var$_collectStack = /*#__PURE__*/ new WeakSet(), $3d28d7f1aac198f5$var$_combineStack = /*#__PURE__*/ new WeakSet(), $3d28d7f1aac198f5$var$_updateState = /*#__PURE__*/ new WeakSet(), $3d28d7f1aac198f5$var$_updateScore = /*#__PURE__*/ new WeakSet(), // Generates random number for cell\n$3d28d7f1aac198f5$var$_generateRandomTile = /*#__PURE__*/ new WeakSet();\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        (0, $ea91727f98d0802f$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_move);\n        (0, $ea91727f98d0802f$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_collectStack);\n        (0, $ea91727f98d0802f$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_combineStack);\n        (0, $ea91727f98d0802f$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_updateState);\n        (0, $ea91727f98d0802f$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_updateScore);\n        (0, $ea91727f98d0802f$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_generateRandomTile);\n        this.initialState = initialState;\n        this.state = initialState.map(function(row) {\n            return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n        });\n        this.previousState = this.state.map(function(row) {\n            return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n        });\n        this.score = 0;\n        this.gameOver = false;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                (0, $ac6739cbe5bf1c84$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_move, $3d28d7f1aac198f5$var$move).call(this, false, false);\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                (0, $ac6739cbe5bf1c84$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_move, $3d28d7f1aac198f5$var$move).call(this, false, true);\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                (0, $ac6739cbe5bf1c84$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_move, $3d28d7f1aac198f5$var$move).call(this, true, false);\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                (0, $ac6739cbe5bf1c84$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_move, $3d28d7f1aac198f5$var$move).call(this, true, true);\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            key: \"getPreviousState\",\n            value: function getPreviousState() {\n                return this.previousState;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                var isInitial = JSON.stringify(this.state) === JSON.stringify(this.initialState);\n                if (isInitial) return \"idle\";\n                if (this.state.flat().includes(2048)) return \"win\";\n                if (this.gameOver) return \"lose\";\n                return \"playing\";\n            }\n        },\n        {\n            // Starts the game\n            key: \"start\",\n            value: function start() {\n                this.previousState = this.state.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n                // Generates first two numbers at game start\n                (0, $ac6739cbe5bf1c84$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_generateRandomTile, $3d28d7f1aac198f5$var$generateRandomTile).call(this);\n                (0, $ac6739cbe5bf1c84$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_generateRandomTile, $3d28d7f1aac198f5$var$generateRandomTile).call(this);\n            }\n        },\n        {\n            // Resets the game\n            key: \"restart\",\n            value: function restart() {\n                this.previousState = this.state.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n                this.state = this.initialState.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n                this.score = 0;\n                this.gameOver = false;\n            }\n        },\n        {\n            // Returns false if there are no more available moves\n            key: \"hasPossibleMoves\",\n            value: function hasPossibleMoves() {\n                // Check if there's at least one empty cell\n                if (this.state.flat().includes(0)) return true;\n                // Check if tiles can be merged\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    var current = this.state[row][col];\n                    // Check horizontal merge\n                    if (col < 3 && current === this.state[row][col + 1]) return true;\n                    // Check vertical merge\n                    if (row < 3 && current === this.state[row + 1][col]) return true;\n                }\n                return false;\n            }\n        }\n    ], [\n        {\n            key: \"getEmptyCells\",\n            value: // Returns empty cells\n            function getEmptyCells(state) {\n                return state.flat().filter(function(cell) {\n                    return cell === 0;\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\nfunction $3d28d7f1aac198f5$var$move() {\n    var isVertical = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false, reverse = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    if (this.getStatus() !== \"playing\" || this.getStatus() === \"win\") return;\n    this.previousState = this.state.map(function(row) {\n        return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n    });\n    var changed = false;\n    for(var i = 0; i < 4; i++){\n        var stack = (0, $ac6739cbe5bf1c84$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_collectStack, $3d28d7f1aac198f5$var$collectStack).call(this, i, isVertical, reverse);\n        var newStack = (0, $ac6739cbe5bf1c84$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_combineStack, $3d28d7f1aac198f5$var$combineStack).call(this, stack);\n        if ((0, $ac6739cbe5bf1c84$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_updateState, $3d28d7f1aac198f5$var$updateState).call(this, i, newStack, isVertical, reverse)) changed = true;\n    }\n    if (changed) {\n        (0, $ac6739cbe5bf1c84$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_generateRandomTile, $3d28d7f1aac198f5$var$generateRandomTile).call(this);\n        if (!this.hasPossibleMoves()) this.gameOver = true;\n    }\n}\nfunction $3d28d7f1aac198f5$var$collectStack(index, isVertical, reverse) {\n    var stack = [];\n    for(var j = 0; j < 4; j++){\n        var cellValue = isVertical ? this.state[reverse ? 3 - j : j][index] : this.state[index][reverse ? 3 - j : j];\n        if (cellValue !== 0) stack.push(cellValue);\n    }\n    return stack;\n}\nfunction $3d28d7f1aac198f5$var$combineStack(stack) {\n    var newStack = [];\n    while(stack.length > 0){\n        var firstNumber = stack.shift();\n        if (stack.length > 0 && firstNumber === stack[0]) {\n            var combinedNumbers = firstNumber + stack.shift();\n            newStack.push(combinedNumbers);\n            (0, $ac6739cbe5bf1c84$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_updateScore, $3d28d7f1aac198f5$var$updateScore).call(this, combinedNumbers);\n        } else newStack.push(firstNumber);\n    }\n    while(newStack.length < 4)newStack.push(0);\n    return newStack;\n}\nfunction $3d28d7f1aac198f5$var$updateState(index, newStack, isVertical, reverse) {\n    var changed = false;\n    for(var j = 0; j < 4; j++){\n        var currentValue = isVertical ? this.state[reverse ? 3 - j : j][index] : this.state[index][reverse ? 3 - j : j];\n        if (currentValue !== newStack[j]) {\n            changed = true;\n            if (isVertical) this.state[reverse ? 3 - j : j][index] = newStack[j];\n            else this.state[index][reverse ? 3 - j : j] = newStack[j];\n        }\n    }\n    return changed;\n}\nfunction $3d28d7f1aac198f5$var$updateScore() {\n    var newScore = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n    this.score += newScore;\n    return this.score;\n}\nfunction $3d28d7f1aac198f5$var$generateRandomTile() {\n    var row, col;\n    do {\n        // Random row and column\n        row = Math.floor(Math.random() * 4);\n        col = Math.floor(Math.random() * 4);\n    }while (this.state[row][col] !== 0); // Checking that the cell is empty\n    /**\n     * Math.floor(Math.random() * 100) generates number from 0 to 100\n     * if random number < 10, 4 is returned, otherwise 2 is returned\n     * resulting in a 90% chance for 2 and a 10% chance for 4\n     */ this.state[row][col] = Math.floor(Math.random() * 100) < 10 ? 4 : 2;\n}\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\n\"use strict\";\nvar $197cd56b15c33885$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports)))();\nvar $197cd56b15c33885$var$isFirstRender = true;\n// Returns changed rows and columns\nvar $197cd56b15c33885$var$getNewNumbers = function() {\n    var currentState = $197cd56b15c33885$var$game.getState();\n    var previousState = $197cd56b15c33885$var$game.getPreviousState();\n    /**\n   * compares the previous and current state,\n   * returns an array of changed cells, otherwise an empty array\n   *\n   * For example:\n   *   [\n   *     { rowIndex: 0, cellIndex: 1, newValue: 2 },\n   *     { rowIndex: 1, cellIndex: 3, newValue: 64 },\n   *     { rowIndex: 1, cellIndex: 2, newValue: 128 },\n   *   ]\n   */ var result = currentState.reduce(function(changedIndices, row, rowIndex) {\n        row.forEach(function(cell, cellIndex) {\n            if ($197cd56b15c33885$var$isFirstRender || cell !== previousState[rowIndex][cellIndex]) changedIndices.push({\n                rowIndex: rowIndex,\n                cellIndex: cellIndex,\n                newValue: cell\n            });\n        });\n        return changedIndices;\n    }, []);\n    if ($197cd56b15c33885$var$isFirstRender) $197cd56b15c33885$var$isFirstRender = false;\n    return result;\n};\n// Sets new numbers on page\nvar $197cd56b15c33885$var$setChangedCells = function() {\n    var allRows = document.querySelectorAll(\".field-row\");\n    var changedCells = $197cd56b15c33885$var$getNewNumbers();\n    // Checks if all cells are equal to 0\n    var gameIsRestarted = (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports))).getEmptyCells($197cd56b15c33885$var$game.getState()).length === 16;\n    changedCells.forEach(function(param) {\n        var rowIndex = param.rowIndex, cellIndex = param.cellIndex, newValue = param.newValue;\n        var columnsInRow = allRows[rowIndex].querySelectorAll(\".field-cell\");\n        var cell = columnsInRow[cellIndex];\n        cell.className = \"field-cell\";\n        cell.textContent = gameIsRestarted || newValue === 0 ? \"\" : newValue;\n        if (!gameIsRestarted && newValue !== 0) cell.classList.add(\"field-cell--\".concat(newValue));\n    });\n    // Updates the score on page after each move\n    var gameScore = $197cd56b15c33885$var$game.getScore();\n    document.querySelector(\".game-score\").textContent = gameScore;\n};\n// Displays message <p> and sets styles\nvar $197cd56b15c33885$var$updateGameStatus = function(currentStatus) {\n    var messages = {\n        lose: document.querySelector(\".message-lose\"),\n        win: document.querySelector(\".message-win\"),\n        idle: document.querySelector(\".message-start\")\n    };\n    // Hide all messages first\n    Object.values(messages).forEach(function(message) {\n        message.classList.add(\"hidden\");\n    });\n    // Show the appropriate message\n    if (messages[currentStatus]) messages[currentStatus].classList.remove(\"hidden\");\n    // Update start button\n    if (currentStatus === \"idle\") {\n        $197cd56b15c33885$var$startButton.classList.remove(\"restart\");\n        $197cd56b15c33885$var$startButton.classList.add(\"start\");\n        $197cd56b15c33885$var$startButton.textContent = \"Start\";\n    }\n    if (currentStatus === \"playing\") {\n        $197cd56b15c33885$var$startButton.classList.remove(\"start\");\n        $197cd56b15c33885$var$startButton.classList.add(\"restart\");\n        $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n    }\n    if (currentStatus === \"lose\") document.removeEventListener(\"keydown\", $197cd56b15c33885$var$handleKeyDown);\n    if (currentStatus === \"win\") document.removeEventListener(\"keydown\", $197cd56b15c33885$var$handleKeyDown);\n};\nvar $197cd56b15c33885$var$handleKeyDown = function(e) {\n    var key = e.key;\n    var moves = {\n        ArrowUp: function() {\n            return $197cd56b15c33885$var$game.moveUp();\n        },\n        ArrowDown: function() {\n            return $197cd56b15c33885$var$game.moveDown();\n        },\n        ArrowLeft: function() {\n            return $197cd56b15c33885$var$game.moveLeft();\n        },\n        ArrowRight: function() {\n            return $197cd56b15c33885$var$game.moveRight();\n        }\n    };\n    if (moves[key]) {\n        moves[key](); // Calls the appropriate method\n        $197cd56b15c33885$var$setChangedCells(); //  Updates cells after each movement\n        $197cd56b15c33885$var$updateGameStatus($197cd56b15c33885$var$game.getStatus()); // Updates status\n    }\n};\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$gameStarted = false;\n// Start game\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$gameStarted = !$197cd56b15c33885$var$gameStarted;\n    // If game stopped\n    if (!$197cd56b15c33885$var$gameStarted) {\n        $197cd56b15c33885$var$game.restart();\n        // Sets new numbers on page\n        $197cd56b15c33885$var$setChangedCells();\n        // Checks game status and update message\n        $197cd56b15c33885$var$updateGameStatus($197cd56b15c33885$var$game.getStatus());\n        // Turnes off listening for keyboard events\n        document.removeEventListener(\"keydown\", $197cd56b15c33885$var$handleKeyDown);\n        return;\n    }\n    // Generates 2 cells at the beginning\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$setChangedCells();\n    $197cd56b15c33885$var$updateGameStatus($197cd56b15c33885$var$game.getStatus());\n    // Turnes on listening for keyboard events\n    document.addEventListener(\"keydown\", $197cd56b15c33885$var$handleKeyDown);\n});\n\n})();\n//# sourceMappingURL=index.9630fd0d.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class';\n\nconst game = new Game();\n\nlet isFirstRender = true;\n\n// Returns changed rows and columns\nconst getNewNumbers = () => {\n  const currentState = game.getState();\n  const previousState = game.getPreviousState();\n  /**\n   * compares the previous and current state,\n   * returns an array of changed cells, otherwise an empty array\n   *\n   * For example:\n   *   [\n   *     { rowIndex: 0, cellIndex: 1, newValue: 2 },\n   *     { rowIndex: 1, cellIndex: 3, newValue: 64 },\n   *     { rowIndex: 1, cellIndex: 2, newValue: 128 },\n   *   ]\n   */\n  const result = currentState.reduce((changedIndices, row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      if (isFirstRender || cell !== previousState[rowIndex][cellIndex]) {\n        changedIndices.push({\n          rowIndex: rowIndex,\n          cellIndex: cellIndex,\n          newValue: cell,\n        });\n      }\n    });\n\n    return changedIndices;\n  }, []);\n\n  if (isFirstRender) {\n    isFirstRender = false;\n  }\n\n  return result;\n};\n\n// Sets new numbers on page\nconst setChangedCells = () => {\n  const allRows = document.querySelectorAll('.field-row');\n  const changedCells = getNewNumbers();\n\n  // Checks if all cells are equal to 0\n  const gameIsRestarted = Game.getEmptyCells(game.getState()).length === 16;\n\n  changedCells.forEach(({ rowIndex, cellIndex, newValue }) => {\n    const columnsInRow = allRows[rowIndex].querySelectorAll('.field-cell');\n    const cell = columnsInRow[cellIndex];\n\n    cell.className = 'field-cell';\n    cell.textContent = gameIsRestarted || newValue === 0 ? '' : newValue;\n\n    if (!gameIsRestarted && newValue !== 0) {\n      cell.classList.add(`field-cell--${newValue}`);\n    }\n  });\n\n  // Updates the score on page after each move\n  const gameScore = game.getScore();\n\n  document.querySelector('.game-score').textContent = gameScore;\n};\n\n// Displays message <p> and sets styles\nconst updateGameStatus = (currentStatus) => {\n  const messages = {\n    lose: document.querySelector('.message-lose'),\n    win: document.querySelector('.message-win'),\n    idle: document.querySelector('.message-start'),\n  };\n\n  // Hide all messages first\n  Object.values(messages).forEach((message) => {\n    message.classList.add('hidden');\n  });\n\n  // Show the appropriate message\n  if (messages[currentStatus]) {\n    messages[currentStatus].classList.remove('hidden');\n  }\n\n  // Update start button\n  if (currentStatus === 'idle') {\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n  }\n\n  if (currentStatus === 'playing') {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  }\n\n  if (currentStatus === 'lose') {\n    document.removeEventListener('keydown', handleKeyDown);\n  }\n\n  if (currentStatus === 'win') {\n    document.removeEventListener('keydown', handleKeyDown);\n  }\n};\n\nconst handleKeyDown = (e) => {\n  const key = e.key;\n\n  const moves = {\n    ArrowUp: () => game.moveUp(),\n    ArrowDown: () => game.moveDown(),\n    ArrowLeft: () => game.moveLeft(),\n    ArrowRight: () => game.moveRight(),\n  };\n\n  if (moves[key]) {\n    moves[key](); // Calls the appropriate method\n    setChangedCells(); //  Updates cells after each movement\n    updateGameStatus(game.getStatus()); // Updates status\n  }\n};\n\nconst startButton = document.querySelector('.start');\n\nlet gameStarted = false;\n\n// Start game\nstartButton.addEventListener('click', () => {\n  gameStarted = !gameStarted;\n\n  // If game stopped\n  if (!gameStarted) {\n    game.restart();\n\n    // Sets new numbers on page\n    setChangedCells();\n\n    // Checks game status and update message\n    updateGameStatus(game.getStatus());\n\n    // Turnes off listening for keyboard events\n    document.removeEventListener('keydown', handleKeyDown);\n\n    return;\n  }\n\n  // Generates 2 cells at the beginning\n  game.start();\n  setChangedCells();\n  updateGameStatus(game.getStatus());\n\n  // Turnes on listening for keyboard events\n  document.addEventListener('keydown', handleKeyDown);\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.previousState = this.state.map((row) => [...row]);\n\n    this.score = 0;\n    this.gameOver = false;\n  }\n\n  // Returns empty cells\n  static getEmptyCells(state) {\n    return state.flat().filter((cell) => cell === 0);\n  }\n\n  moveLeft() {\n    this.#move(false, false);\n  }\n\n  moveRight() {\n    this.#move(false, true);\n  }\n\n  moveUp() {\n    this.#move(true, false);\n  }\n\n  moveDown() {\n    this.#move(true, true);\n  }\n\n  // Universal function to move tiles\n  #move(isVertical = false, reverse = false) {\n    if (this.getStatus() !== 'playing' || this.getStatus() === 'win') {\n      return;\n    }\n\n    this.previousState = this.state.map((row) => [...row]);\n\n    let changed = false;\n\n    for (let i = 0; i < 4; i++) {\n      const stack = this.#collectStack(i, isVertical, reverse);\n      const newStack = this.#combineStack(stack);\n\n      if (this.#updateState(i, newStack, isVertical, reverse)) {\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.#generateRandomTile();\n\n      if (!this.hasPossibleMoves()) {\n        this.gameOver = true;\n      }\n    }\n  }\n\n  #collectStack(index, isVertical, reverse) {\n    const stack = [];\n\n    for (let j = 0; j < 4; j++) {\n      const cellValue = isVertical\n        ? this.state[reverse ? 3 - j : j][index]\n        : this.state[index][reverse ? 3 - j : j];\n\n      if (cellValue !== 0) {\n        stack.push(cellValue);\n      }\n    }\n\n    return stack;\n  }\n\n  #combineStack(stack) {\n    const newStack = [];\n\n    while (stack.length > 0) {\n      const firstNumber = stack.shift();\n\n      if (stack.length > 0 && firstNumber === stack[0]) {\n        const combinedNumbers = firstNumber + stack.shift();\n\n        newStack.push(combinedNumbers);\n        this.#updateScore(combinedNumbers);\n      } else {\n        newStack.push(firstNumber);\n      }\n    }\n\n    while (newStack.length < 4) {\n      newStack.push(0);\n    }\n\n    return newStack;\n  }\n\n  #updateState(index, newStack, isVertical, reverse) {\n    let changed = false;\n\n    for (let j = 0; j < 4; j++) {\n      const currentValue = isVertical\n        ? this.state[reverse ? 3 - j : j][index]\n        : this.state[index][reverse ? 3 - j : j];\n\n      if (currentValue !== newStack[j]) {\n        changed = true;\n\n        if (isVertical) {\n          this.state[reverse ? 3 - j : j][index] = newStack[j];\n        } else {\n          this.state[index][reverse ? 3 - j : j] = newStack[j];\n        }\n      }\n    }\n\n    return changed;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  #updateScore(newScore = 0) {\n    this.score += newScore;\n\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getPreviousState() {\n    return this.previousState;\n  }\n\n  getStatus() {\n    const isInitial =\n      JSON.stringify(this.state) === JSON.stringify(this.initialState);\n\n    if (isInitial) {\n      return 'idle';\n    }\n\n    if (this.state.flat().includes(2048)) {\n      return 'win';\n    }\n\n    if (this.gameOver) {\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  // Starts the game\n  start() {\n    this.previousState = this.state.map((row) => [...row]);\n\n    // Generates first two numbers at game start\n    this.#generateRandomTile();\n    this.#generateRandomTile();\n  }\n\n  // Resets the game\n  restart() {\n    this.previousState = this.state.map((row) => [...row]);\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.gameOver = false;\n  }\n\n  // Returns false if there are no more available moves\n  hasPossibleMoves() {\n    // Check if there's at least one empty cell\n    if (this.state.flat().includes(0)) {\n      return true;\n    }\n\n    // Check if tiles can be merged\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.state[row][col];\n\n        // Check horizontal merge\n        if (col < 3 && current === this.state[row][col + 1]) {\n          return true;\n        }\n\n        // Check vertical merge\n        if (row < 3 && current === this.state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  // Generates random number for cell\n  #generateRandomTile() {\n    let row, col;\n\n    do {\n      // Random row and column\n      row = Math.floor(Math.random() * 4);\n      col = Math.floor(Math.random() * 4);\n    } while (this.state[row][col] !== 0); // Checking that the cell is empty\n\n    /**\n     * Math.floor(Math.random() * 100) generates number from 0 to 100\n     * if random number < 10, 4 is returned, otherwise 2 is returned\n     * resulting in a 90% chance for 2 and a 10% chance for 4\n     */\n    this.state[row][col] = Math.floor(Math.random() * 100) < 10 ? 4 : 2;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _class_private_method_get(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) throw new TypeError(\"attempted to get private field on non-instance\");\n\n    return fn;\n}\nexport { _class_private_method_get as _ };\n","import { _ as _check_private_redeclaration } from \"./_check_private_redeclaration.js\";\n\nfunction _class_private_method_init(obj, privateSet) {\n    _check_private_redeclaration(obj, privateSet);\n    privateSet.add(obj);\n}\nexport { _class_private_method_init as _ };\n","function _check_private_redeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\nexport { _check_private_redeclaration as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$parcel$interopDefault","a","__esModule","default","$3d28d7f1aac198f5$exports","$ac6739cbe5bf1c84$export$71511d61b312f219","receiver","privateSet","fn","has","TypeError","$ea91727f98d0802f$export$71511d61b312f219","obj","privateCollection","add","$4fc75ccb937ab1df$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$c3b10a83b523f372$export$71511d61b312f219","arr","len","arr2","Array","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","$3d28d7f1aac198f5$var$_move","WeakSet","$3d28d7f1aac198f5$var$_collectStack","$3d28d7f1aac198f5$var$_combineStack","$3d28d7f1aac198f5$var$_updateState","$3d28d7f1aac198f5$var$_updateScore","$3d28d7f1aac198f5$var$_generateRandomTile","$3d28d7f1aac198f5$var$move","isVertical","arguments","reverse","getStatus","previousState","state","map","row","changed","stack","$3d28d7f1aac198f5$var$collectStack","newStack","$3d28d7f1aac198f5$var$combineStack","$3d28d7f1aac198f5$var$updateState","$3d28d7f1aac198f5$var$generateRandomTile","hasPossibleMoves","gameOver","index","j","cellValue","push","firstNumber","shift","combinedNumbers","$3d28d7f1aac198f5$var$updateScore","newScore","score","col","Math","floor","random","$197cd56b15c33885$var$game","protoProps","staticProps","Game","initialState","instance","Constructor","value","JSON","stringify","flat","includes","current","filter","cell","$197cd56b15c33885$var$isFirstRender","$197cd56b15c33885$var$getNewNumbers","currentState","getState","getPreviousState","result","reduce","changedIndices","rowIndex","forEach","cellIndex","newValue","$197cd56b15c33885$var$setChangedCells","allRows","document","querySelectorAll","changedCells","gameIsRestarted","getEmptyCells","param","columnsInRow","className","textContent","classList","concat","gameScore","getScore","querySelector","$197cd56b15c33885$var$updateGameStatus","currentStatus","messages","lose","win","idle","values","message","remove","$197cd56b15c33885$var$startButton","removeEventListener","$197cd56b15c33885$var$handleKeyDown","e","moves","ArrowUp","moveUp","ArrowDown","moveDown","ArrowLeft","moveLeft","ArrowRight","moveRight","$197cd56b15c33885$var$gameStarted","addEventListener","restart","start"],"version":3,"file":"index.9630fd0d.js.map"}